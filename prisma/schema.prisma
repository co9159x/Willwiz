// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  
  // Relations
  users     User[]
  clients   Client[]
  wills     Will[]
  documents Document[]
  pricing   Pricing?
  audits    AuditLog[]
  tasks     Task[]
  notes     Note[]
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String
  role           UserRole  @default(broker)
  tenantId       String?
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  
  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

enum UserRole {
  broker
  broker_admin
  platform_admin
}

// PostgreSQL supports enums and JSON natively

model Client {
  id            String       @id @default(uuid())
  tenantId      String
  firstName     String
  lastName      String
  dob           DateTime?
  email         String?
  phone         String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  postcode      String?
  country       String       @default("UK")
  status        ClientStatus @default(active)
  lastUpdatedBy String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  wills     Will[]
  notes     Note[]
  documents Document[]
  tasks     Task[]
  
  @@index([tenantId])
  @@unique([tenantId, email])
}

enum ClientStatus {
  active
  inactive
  archived
}

model Will {
  id             String    @id @default(uuid())
  tenantId       String
  clientId       String
  version        Int       @default(1)
  status         WillStatus @default(draft)
  jsonPayload    Json      // PostgreSQL supports JSON natively
  draftMarkdown  String?
  signedPdfUrl   String?
  checksumSha256 String?
  lockAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  
  @@index([tenantId, clientId])
}

enum WillStatus {
  draft
  sent_for_approval
  signed
}

model Document {
  id             String   @id @default(uuid())
  tenantId       String
  clientId       String
  willId         String?
  title          String
  kind           String   // draft, signed, upload
  url            String
  checksumSha256 String?
  createdAt      DateTime @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  
  @@index([tenantId, clientId])
}

model Pricing {
  tenantId             String @id
  singleWillPrice      Int    @default(20000) // pence
  mirrorWillPrice      Int    @default(35000)
  trustWillPrice       Int    @default(75000)
  revenueSplitBroker   Int    @default(90)
  revenueSplitPlatform Int    @default(10)
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Task {
  id          String    @id @default(uuid())
  tenantId    String
  clientId    String
  title       String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdBy   String?
  createdAt   DateTime  @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
}

model Note {
  id        String   @id @default(uuid())
  tenantId  String
  clientId  String
  body      String
  authorId  String
  createdAt DateTime @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  tenantId   String
  userId     String?
  event      String
  entityType String
  entityId   String?
  meta       String? // JSON stored as string for SQLite compatibility
  occurredAt DateTime @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId, occurredAt])
}